#! /usr/bin/env node
// -*- Mode: js2; -*-

var argv = require("optimist")
  .usage("$0 [--adset adset] [--secret secret] [--output out] url [output]")
  .alias('a', 'adset')
  .alias('d', 'debug')
  .alias('s', 'secret')
  .alias('o', 'output')
  .alias('r', 'reset')
  .alias('t', 'transcript')
  .boolean('rf')
  .boolean('reset')
  .boolean('redo')
  .boolean('debug')
  .boolean('transcript')
  .demand('adset')
  .argv;

var adset = argv.adset;
var api_url = argv.api || "http://api.yactraq.com";

var old_style = false;

var fs = require('fs');

var secret = argv.secret;
if (! secret) {
  try {
    log("Try to read secret from .secret");
    var fcontent = fs.readFileSync(".secret", "UTF-8");
    if (fcontent) {
      secret = fcontent.replace(/^\s*(.*)\s*$/, "$1");
      log("Secret read");
    }
  } catch (x) {
    ;
  }
}
if (! secret) {
  console.error("Must provide a yactraq secret value");
  process.exit(1);
}

if (argv._.length < 1) {
  console.error("Must provide URL to process");
  process.exit(1);
}

var url = argv._[0];

// Set up output stream
var ostream = process.stdout;
if (argv.output) {
  ostream = fs.createWriteStream(argv.output).
    on('error', function (err) {
      console.error(argv.output + ": " + err.toString());
      process.exit(1);
    });
}

function processStream(url, cb) {
  var request = require('request');

  var params = {
    adset: adset,
    secret: secret,
    url: url,
    start: argv.reset ? 'reset' : 1
  };
  if (argv.redo) params.redo = 1;
  if (argv.transcript) params.tx = 1;

  function queueAndWait(cb) {
    log("Request stream-status" + (params.start ? " (start)" : ""));
    request({ uri: api_url + "/stream-status", qs: params, json: true },
      function (err, resp, obj) {
        if (err) { cb(err); return; }

        log("href=" + resp.request.href);
        log("status=" + obj.status);
        log("body=" + JSON.stringify(obj, null, 1));
        if (obj.status !== 'processed' && obj.status !== 'failed') {
          delete params.start;
          delete params.redo;
          log("wait 60s");;
          setTimeout(function () { queueAndWait(cb); }, 60*1000);
        } else {
          cb(null, obj);
        }
      });
  }

  queueAndWait(cb);
}

function rf(topics) {
  var rf_accum = {};
  for (var i = 0; i < topics.length; ++i) {
    var t = topics[i];
    var ts = t.ts, ts_t = t.topics;
    // Accumulate values for calculating RF.
    for (var j = 0; j < ts_t.length; ++j) {
      var key = ts_t[j];
      if (! rf_accum[key]) { rf_accum[key] = 0; }
      rf_accum[key] += 6 - j;
    }
  }

  // Now sort and process to get final RF.
  var rfa = [];
  for (var k in rf_accum) { rfa.push([rf_accum[k], k]); }
  rfa = rfa.sort(function (x, y) { return y[0] - x[0]; });
  return rfa;
}

processStream(url, function (err, data) {
  if (err) {
    console.error(url + ": " + err.toString());
    process.exit(1);
    return;
  }

  log("done.");
  //console.log("OUT: " + JSON.stringify(data, null, 1));
  var out = data;
  var topics = data.topics;
  if (old_style) {
    var new_topics = [];
    topics.forEach(function (t) {
      new_topics.push([t.complete ? 0 : t.ts].concat(t.topics));
    });
    out = topics = new_topics;
  } else {
    // Change the output format slightly.
    if (argv.rf) {
      out.rf = rf(topics);
    }
  }

  var s = JSON.stringify(out, null, 1);
  ostream.write(s);
  if (ostream == process.stdout) {
    process.exit(0);
  }
  ostream.on('close', function () {
    process.exit(0);
  });
  ostream.end();
});

function log(msg) {
  if (argv.debug) console.warn(msg);
}
